# CarpetX Metadata
---
!carpetx-metadata-1.0.0
nghostzones: [3, 3, 3]
iteration: 150
time: 0.5
delta_time: 0.013333333333333334
ghext: !ghext-2.0.0
  globaldata: !globaldata-1.0.0
    arraygroupdata:
      - !arraygroupdata-1.0.0
        commongroupdata: !commongroupdata-1.0.0
          groupname: BOXINBOX::ACTIVE
          numvars: 3
          varnames: ["active[0]", "active[1]", "active[2]"]
          do_checkpoint: true
          do_restrict: true
          valid:
            -
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
        data:
          -
            - 1
            - 1
            - 1
      - !arraygroupdata-1.0.0
        commongroupdata: !commongroupdata-1.0.0
          groupname: BOXINBOX::NUM_LEVELS
          numvars: 3
          varnames: ["num_levels[0]", "num_levels[1]", "num_levels[2]"]
          do_checkpoint: true
          do_restrict: true
          valid:
            -
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
        data:
          -
            - 3
            - 1
            - 1
      - !arraygroupdata-1.0.0
        commongroupdata: !commongroupdata-1.0.0
          groupname: BOXINBOX::POSITIONS
          numvars: 9
          varnames: ["position_x[0]", "position_x[1]", "position_x[2]", "position_y[0]", "position_y[1]", "position_y[2]", "position_z[0]", "position_z[1]", "position_z[2]"]
          do_checkpoint: true
          do_restrict: true
          valid:
            -
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  ghosts: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
        data:
          -
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
      - !arraygroupdata-1.0.0
        commongroupdata: !commongroupdata-1.0.0
          groupname: BOXINBOX::RADII
          numvars: 3
          varnames: ["radius[0]", "radius[1]", "radius[2]"]
          do_checkpoint: true
          do_restrict: true
          valid:
            -
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
        data:
          -
            - -1
            - 1
            - 0.5
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
      - !arraygroupdata-1.0.0
        commongroupdata: !commongroupdata-1.0.0
          groupname: BOXINBOX::RADIIXYZ
          numvars: 9
          varnames: ["radius_x[0]", "radius_x[1]", "radius_x[2]", "radius_y[0]", "radius_y[1]", "radius_y[2]", "radius_z[0]", "radius_z[1]", "radius_z[2]"]
          do_checkpoint: true
          do_restrict: true
          valid:
            -
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
              - !why_valid-1.0.0
                valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                why:
                  int: "CallFunction iteration 0 CCTK_INITIAL: BoxInBox::BoxInBox_Init: Mark output variables as valid"
                  outer: SetupGlobals
                  ghosts: SetupGlobals
        data:
          -
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
            - -1
  patchdata:
    - !patchdata-1.0.0
      patch: 0
      amrcore: !amrcore-1.0.0
        maxLevel: 2
        finestLevel: 2
        geometry:
          - !geometry-1.0.0
            prob_domain: !realbox-1.0.0 {xlo: [-4, -4, -4], xhi: [4, 4, 4]}
            domain: !box-1.0.0 {small: [0, 0, 0], big: [149, 149, 149]}
            is_periodic: [1, 1, 1]
          - !geometry-1.0.0
            prob_domain: !realbox-1.0.0 {xlo: [-4, -4, -4], xhi: [4, 4, 4]}
            domain: !box-1.0.0 {small: [0, 0, 0], big: [299, 299, 299]}
            is_periodic: [1, 1, 1]
          - !geometry-1.0.0
            prob_domain: !realbox-1.0.0 {xlo: [-4, -4, -4], xhi: [4, 4, 4]}
            domain: !box-1.0.0 {small: [0, 0, 0], big: [599, 599, 599]}
            is_periodic: [1, 1, 1]
        distributionMapping:
          - !distributionmapping-1.0.0
            processorMap: [13, 13, 0, 2, 17, 13, 13, 0, 2, 17, 0, 15, 15, 3, 3, 4, 4, 19, 21, 21, 19, 19, 5, 6, 6, 14, 14, 0, 2, 17, 14, 14, 0, 2, 17, 15, 15, 1, 3, 3, 4, 4, 19, 21, 6, 5, 5, 5, 6, 6, 1, 1, 16, 3, 18, 1, 1, 16, 18, 18, 16, 16, 2, 18, 4, 5, 20, 20, 22, 22, 20, 20, 21, 22, 22, 7, 7, 7, 9, 9, 7, 7, 23, 9, 9, 23, 23, 23, 9, 25, 10, 10, 26, 27, 27, 26, 26, 26, 27, 12, 8, 8, 8, 25, 25, 8, 8, 24, 25, 10, 24, 24, 24, 10, 10, 11, 11, 11, 12, 12, 11, 11, 27, 12, 12]
          - !distributionmapping-1.0.0
            processorMap: [6, 11, 9, 12, 14, 18, 14, 5, 20, 7, 20, 15, 10, 19, 21, 1, 21, 8, 16, 16, 23, 23, 18, 24, 26, 26, 15, 15, 2, 2, 19, 27, 1, 8, 3, 3, 17, 17, 24, 25, 25, 5, 27, 0, 13, 13, 13, 4, 0, 7, 4, 22, 22, 22]
          - !distributionmapping-1.0.0
            processorMap: [2, 1, 23, 17, 23, 17, 4, 27, 16, 14, 21, 9, 27, 16, 21, 9, 14, 0, 20, 20, 24, 22, 24, 15, 5, 13, 26, 10, 18, 6, 13, 12, 18, 8, 10, 7, 3, 25, 22, 25, 15, 11, 12, 11, 6, 19, 8, 19, 26, 11, 7, 19, 25, 19]
        boxArray:
          - !boxarray-1.0.0
            - !box-1.0.0 {small: [0, 0, 0], big: [29, 29, 29]}
            - !box-1.0.0 {small: [30, 0, 0], big: [59, 29, 29]}
            - !box-1.0.0 {small: [60, 0, 0], big: [89, 29, 29]}
            - !box-1.0.0 {small: [90, 0, 0], big: [119, 29, 29]}
            - !box-1.0.0 {small: [120, 0, 0], big: [149, 29, 29]}
            - !box-1.0.0 {small: [0, 30, 0], big: [29, 59, 29]}
            - !box-1.0.0 {small: [30, 30, 0], big: [59, 59, 29]}
            - !box-1.0.0 {small: [60, 30, 0], big: [89, 59, 29]}
            - !box-1.0.0 {small: [90, 30, 0], big: [119, 59, 29]}
            - !box-1.0.0 {small: [120, 30, 0], big: [149, 59, 29]}
            - !box-1.0.0 {small: [0, 60, 0], big: [29, 89, 29]}
            - !box-1.0.0 {small: [30, 60, 0], big: [59, 89, 29]}
            - !box-1.0.0 {small: [60, 60, 0], big: [89, 89, 29]}
            - !box-1.0.0 {small: [90, 60, 0], big: [119, 89, 29]}
            - !box-1.0.0 {small: [120, 60, 0], big: [149, 89, 29]}
            - !box-1.0.0 {small: [0, 90, 0], big: [29, 119, 29]}
            - !box-1.0.0 {small: [30, 90, 0], big: [59, 119, 29]}
            - !box-1.0.0 {small: [60, 90, 0], big: [89, 119, 29]}
            - !box-1.0.0 {small: [90, 90, 0], big: [119, 119, 29]}
            - !box-1.0.0 {small: [120, 90, 0], big: [149, 119, 29]}
            - !box-1.0.0 {small: [0, 120, 0], big: [29, 149, 29]}
            - !box-1.0.0 {small: [30, 120, 0], big: [59, 149, 29]}
            - !box-1.0.0 {small: [60, 120, 0], big: [89, 149, 29]}
            - !box-1.0.0 {small: [90, 120, 0], big: [119, 149, 29]}
            - !box-1.0.0 {small: [120, 120, 0], big: [149, 149, 29]}
            - !box-1.0.0 {small: [0, 0, 30], big: [29, 29, 59]}
            - !box-1.0.0 {small: [30, 0, 30], big: [59, 29, 59]}
            - !box-1.0.0 {small: [60, 0, 30], big: [89, 29, 59]}
            - !box-1.0.0 {small: [90, 0, 30], big: [119, 29, 59]}
            - !box-1.0.0 {small: [120, 0, 30], big: [149, 29, 59]}
            - !box-1.0.0 {small: [0, 30, 30], big: [29, 59, 59]}
            - !box-1.0.0 {small: [30, 30, 30], big: [59, 59, 59]}
            - !box-1.0.0 {small: [60, 30, 30], big: [89, 59, 59]}
            - !box-1.0.0 {small: [90, 30, 30], big: [119, 59, 59]}
            - !box-1.0.0 {small: [120, 30, 30], big: [149, 59, 59]}
            - !box-1.0.0 {small: [0, 60, 30], big: [29, 89, 59]}
            - !box-1.0.0 {small: [30, 60, 30], big: [59, 89, 59]}
            - !box-1.0.0 {small: [60, 60, 30], big: [89, 89, 59]}
            - !box-1.0.0 {small: [90, 60, 30], big: [119, 89, 59]}
            - !box-1.0.0 {small: [120, 60, 30], big: [149, 89, 59]}
            - !box-1.0.0 {small: [0, 90, 30], big: [29, 119, 59]}
            - !box-1.0.0 {small: [30, 90, 30], big: [59, 119, 59]}
            - !box-1.0.0 {small: [60, 90, 30], big: [89, 119, 59]}
            - !box-1.0.0 {small: [90, 90, 30], big: [119, 119, 59]}
            - !box-1.0.0 {small: [120, 90, 30], big: [149, 119, 59]}
            - !box-1.0.0 {small: [0, 120, 30], big: [29, 149, 59]}
            - !box-1.0.0 {small: [30, 120, 30], big: [59, 149, 59]}
            - !box-1.0.0 {small: [60, 120, 30], big: [89, 149, 59]}
            - !box-1.0.0 {small: [90, 120, 30], big: [119, 149, 59]}
            - !box-1.0.0 {small: [120, 120, 30], big: [149, 149, 59]}
            - !box-1.0.0 {small: [0, 0, 60], big: [29, 29, 89]}
            - !box-1.0.0 {small: [30, 0, 60], big: [59, 29, 89]}
            - !box-1.0.0 {small: [60, 0, 60], big: [89, 29, 89]}
            - !box-1.0.0 {small: [90, 0, 60], big: [119, 29, 89]}
            - !box-1.0.0 {small: [120, 0, 60], big: [149, 29, 89]}
            - !box-1.0.0 {small: [0, 30, 60], big: [29, 59, 89]}
            - !box-1.0.0 {small: [30, 30, 60], big: [59, 59, 89]}
            - !box-1.0.0 {small: [60, 30, 60], big: [89, 59, 89]}
            - !box-1.0.0 {small: [90, 30, 60], big: [119, 59, 89]}
            - !box-1.0.0 {small: [120, 30, 60], big: [149, 59, 89]}
            - !box-1.0.0 {small: [0, 60, 60], big: [29, 89, 89]}
            - !box-1.0.0 {small: [30, 60, 60], big: [59, 89, 89]}
            - !box-1.0.0 {small: [60, 60, 60], big: [89, 89, 89]}
            - !box-1.0.0 {small: [90, 60, 60], big: [119, 89, 89]}
            - !box-1.0.0 {small: [120, 60, 60], big: [149, 89, 89]}
            - !box-1.0.0 {small: [0, 90, 60], big: [29, 119, 89]}
            - !box-1.0.0 {small: [30, 90, 60], big: [59, 119, 89]}
            - !box-1.0.0 {small: [60, 90, 60], big: [89, 119, 89]}
            - !box-1.0.0 {small: [90, 90, 60], big: [119, 119, 89]}
            - !box-1.0.0 {small: [120, 90, 60], big: [149, 119, 89]}
            - !box-1.0.0 {small: [0, 120, 60], big: [29, 149, 89]}
            - !box-1.0.0 {small: [30, 120, 60], big: [59, 149, 89]}
            - !box-1.0.0 {small: [60, 120, 60], big: [89, 149, 89]}
            - !box-1.0.0 {small: [90, 120, 60], big: [119, 149, 89]}
            - !box-1.0.0 {small: [120, 120, 60], big: [149, 149, 89]}
            - !box-1.0.0 {small: [0, 0, 90], big: [29, 29, 119]}
            - !box-1.0.0 {small: [30, 0, 90], big: [59, 29, 119]}
            - !box-1.0.0 {small: [60, 0, 90], big: [89, 29, 119]}
            - !box-1.0.0 {small: [90, 0, 90], big: [119, 29, 119]}
            - !box-1.0.0 {small: [120, 0, 90], big: [149, 29, 119]}
            - !box-1.0.0 {small: [0, 30, 90], big: [29, 59, 119]}
            - !box-1.0.0 {small: [30, 30, 90], big: [59, 59, 119]}
            - !box-1.0.0 {small: [60, 30, 90], big: [89, 59, 119]}
            - !box-1.0.0 {small: [90, 30, 90], big: [119, 59, 119]}
            - !box-1.0.0 {small: [120, 30, 90], big: [149, 59, 119]}
            - !box-1.0.0 {small: [0, 60, 90], big: [29, 89, 119]}
            - !box-1.0.0 {small: [30, 60, 90], big: [59, 89, 119]}
            - !box-1.0.0 {small: [60, 60, 90], big: [89, 89, 119]}
            - !box-1.0.0 {small: [90, 60, 90], big: [119, 89, 119]}
            - !box-1.0.0 {small: [120, 60, 90], big: [149, 89, 119]}
            - !box-1.0.0 {small: [0, 90, 90], big: [29, 119, 119]}
            - !box-1.0.0 {small: [30, 90, 90], big: [59, 119, 119]}
            - !box-1.0.0 {small: [60, 90, 90], big: [89, 119, 119]}
            - !box-1.0.0 {small: [90, 90, 90], big: [119, 119, 119]}
            - !box-1.0.0 {small: [120, 90, 90], big: [149, 119, 119]}
            - !box-1.0.0 {small: [0, 120, 90], big: [29, 149, 119]}
            - !box-1.0.0 {small: [30, 120, 90], big: [59, 149, 119]}
            - !box-1.0.0 {small: [60, 120, 90], big: [89, 149, 119]}
            - !box-1.0.0 {small: [90, 120, 90], big: [119, 149, 119]}
            - !box-1.0.0 {small: [120, 120, 90], big: [149, 149, 119]}
            - !box-1.0.0 {small: [0, 0, 120], big: [29, 29, 149]}
            - !box-1.0.0 {small: [30, 0, 120], big: [59, 29, 149]}
            - !box-1.0.0 {small: [60, 0, 120], big: [89, 29, 149]}
            - !box-1.0.0 {small: [90, 0, 120], big: [119, 29, 149]}
            - !box-1.0.0 {small: [120, 0, 120], big: [149, 29, 149]}
            - !box-1.0.0 {small: [0, 30, 120], big: [29, 59, 149]}
            - !box-1.0.0 {small: [30, 30, 120], big: [59, 59, 149]}
            - !box-1.0.0 {small: [60, 30, 120], big: [89, 59, 149]}
            - !box-1.0.0 {small: [90, 30, 120], big: [119, 59, 149]}
            - !box-1.0.0 {small: [120, 30, 120], big: [149, 59, 149]}
            - !box-1.0.0 {small: [0, 60, 120], big: [29, 89, 149]}
            - !box-1.0.0 {small: [30, 60, 120], big: [59, 89, 149]}
            - !box-1.0.0 {small: [60, 60, 120], big: [89, 89, 149]}
            - !box-1.0.0 {small: [90, 60, 120], big: [119, 89, 149]}
            - !box-1.0.0 {small: [120, 60, 120], big: [149, 89, 149]}
            - !box-1.0.0 {small: [0, 90, 120], big: [29, 119, 149]}
            - !box-1.0.0 {small: [30, 90, 120], big: [59, 119, 149]}
            - !box-1.0.0 {small: [60, 90, 120], big: [89, 119, 149]}
            - !box-1.0.0 {small: [90, 90, 120], big: [119, 119, 149]}
            - !box-1.0.0 {small: [120, 90, 120], big: [149, 119, 149]}
            - !box-1.0.0 {small: [0, 120, 120], big: [29, 149, 149]}
            - !box-1.0.0 {small: [30, 120, 120], big: [59, 149, 149]}
            - !box-1.0.0 {small: [60, 120, 120], big: [89, 149, 149]}
            - !box-1.0.0 {small: [90, 120, 120], big: [119, 149, 149]}
            - !box-1.0.0 {small: [120, 120, 120], big: [149, 149, 149]}
          - !boxarray-1.0.0
            - !box-1.0.0 {small: [112, 112, 112], big: [139, 139, 127]}
            - !box-1.0.0 {small: [112, 112, 128], big: [139, 139, 139]}
            - !box-1.0.0 {small: [140, 112, 112], big: [163, 139, 127]}
            - !box-1.0.0 {small: [140, 112, 128], big: [163, 139, 139]}
            - !box-1.0.0 {small: [164, 112, 112], big: [187, 139, 127]}
            - !box-1.0.0 {small: [164, 112, 128], big: [187, 139, 139]}
            - !box-1.0.0 {small: [112, 140, 112], big: [139, 163, 127]}
            - !box-1.0.0 {small: [112, 140, 128], big: [139, 163, 139]}
            - !box-1.0.0 {small: [140, 140, 112], big: [163, 163, 127]}
            - !box-1.0.0 {small: [140, 140, 128], big: [163, 163, 139]}
            - !box-1.0.0 {small: [164, 140, 112], big: [187, 163, 127]}
            - !box-1.0.0 {small: [164, 140, 128], big: [187, 163, 139]}
            - !box-1.0.0 {small: [112, 164, 112], big: [139, 187, 127]}
            - !box-1.0.0 {small: [112, 164, 128], big: [139, 187, 139]}
            - !box-1.0.0 {small: [140, 164, 112], big: [163, 187, 127]}
            - !box-1.0.0 {small: [140, 164, 128], big: [163, 187, 139]}
            - !box-1.0.0 {small: [164, 164, 112], big: [187, 187, 127]}
            - !box-1.0.0 {small: [164, 164, 128], big: [187, 187, 139]}
            - !box-1.0.0 {small: [112, 112, 140], big: [139, 139, 155]}
            - !box-1.0.0 {small: [112, 112, 156], big: [139, 139, 163]}
            - !box-1.0.0 {small: [140, 112, 140], big: [163, 139, 155]}
            - !box-1.0.0 {small: [140, 112, 156], big: [163, 139, 163]}
            - !box-1.0.0 {small: [164, 112, 140], big: [187, 139, 155]}
            - !box-1.0.0 {small: [164, 112, 156], big: [187, 139, 163]}
            - !box-1.0.0 {small: [112, 140, 140], big: [139, 163, 155]}
            - !box-1.0.0 {small: [112, 140, 156], big: [139, 163, 163]}
            - !box-1.0.0 {small: [140, 140, 140], big: [163, 163, 155]}
            - !box-1.0.0 {small: [140, 140, 156], big: [163, 163, 163]}
            - !box-1.0.0 {small: [164, 140, 140], big: [187, 163, 155]}
            - !box-1.0.0 {small: [164, 140, 156], big: [187, 163, 163]}
            - !box-1.0.0 {small: [112, 164, 140], big: [139, 187, 155]}
            - !box-1.0.0 {small: [112, 164, 156], big: [139, 187, 163]}
            - !box-1.0.0 {small: [140, 164, 140], big: [163, 187, 155]}
            - !box-1.0.0 {small: [140, 164, 156], big: [163, 187, 163]}
            - !box-1.0.0 {small: [164, 164, 140], big: [187, 187, 155]}
            - !box-1.0.0 {small: [164, 164, 156], big: [187, 187, 163]}
            - !box-1.0.0 {small: [112, 112, 164], big: [139, 139, 179]}
            - !box-1.0.0 {small: [112, 112, 180], big: [139, 139, 187]}
            - !box-1.0.0 {small: [140, 112, 164], big: [163, 139, 179]}
            - !box-1.0.0 {small: [140, 112, 180], big: [163, 139, 187]}
            - !box-1.0.0 {small: [164, 112, 164], big: [187, 139, 179]}
            - !box-1.0.0 {small: [164, 112, 180], big: [187, 139, 187]}
            - !box-1.0.0 {small: [112, 140, 164], big: [139, 163, 179]}
            - !box-1.0.0 {small: [112, 140, 180], big: [139, 163, 187]}
            - !box-1.0.0 {small: [140, 140, 164], big: [163, 163, 179]}
            - !box-1.0.0 {small: [140, 140, 180], big: [163, 163, 187]}
            - !box-1.0.0 {small: [164, 140, 164], big: [187, 163, 179]}
            - !box-1.0.0 {small: [164, 140, 180], big: [187, 163, 187]}
            - !box-1.0.0 {small: [112, 164, 164], big: [139, 187, 179]}
            - !box-1.0.0 {small: [112, 164, 180], big: [139, 187, 187]}
            - !box-1.0.0 {small: [140, 164, 164], big: [163, 187, 179]}
            - !box-1.0.0 {small: [140, 164, 180], big: [163, 187, 187]}
            - !box-1.0.0 {small: [164, 164, 164], big: [187, 187, 179]}
            - !box-1.0.0 {small: [164, 164, 180], big: [187, 187, 187]}
          - !boxarray-1.0.0
            - !box-1.0.0 {small: [262, 262, 262], big: [289, 289, 277]}
            - !box-1.0.0 {small: [262, 262, 278], big: [289, 289, 289]}
            - !box-1.0.0 {small: [290, 262, 262], big: [313, 289, 277]}
            - !box-1.0.0 {small: [290, 262, 278], big: [313, 289, 289]}
            - !box-1.0.0 {small: [314, 262, 262], big: [337, 289, 277]}
            - !box-1.0.0 {small: [314, 262, 278], big: [337, 289, 289]}
            - !box-1.0.0 {small: [262, 290, 262], big: [289, 313, 277]}
            - !box-1.0.0 {small: [262, 290, 278], big: [289, 313, 289]}
            - !box-1.0.0 {small: [290, 290, 262], big: [313, 313, 277]}
            - !box-1.0.0 {small: [290, 290, 278], big: [313, 313, 289]}
            - !box-1.0.0 {small: [314, 290, 262], big: [337, 313, 277]}
            - !box-1.0.0 {small: [314, 290, 278], big: [337, 313, 289]}
            - !box-1.0.0 {small: [262, 314, 262], big: [289, 337, 277]}
            - !box-1.0.0 {small: [262, 314, 278], big: [289, 337, 289]}
            - !box-1.0.0 {small: [290, 314, 262], big: [313, 337, 277]}
            - !box-1.0.0 {small: [290, 314, 278], big: [313, 337, 289]}
            - !box-1.0.0 {small: [314, 314, 262], big: [337, 337, 277]}
            - !box-1.0.0 {small: [314, 314, 278], big: [337, 337, 289]}
            - !box-1.0.0 {small: [262, 262, 290], big: [289, 289, 305]}
            - !box-1.0.0 {small: [262, 262, 306], big: [289, 289, 313]}
            - !box-1.0.0 {small: [290, 262, 290], big: [313, 289, 305]}
            - !box-1.0.0 {small: [290, 262, 306], big: [313, 289, 313]}
            - !box-1.0.0 {small: [314, 262, 290], big: [337, 289, 305]}
            - !box-1.0.0 {small: [314, 262, 306], big: [337, 289, 313]}
            - !box-1.0.0 {small: [262, 290, 290], big: [289, 313, 305]}
            - !box-1.0.0 {small: [262, 290, 306], big: [289, 313, 313]}
            - !box-1.0.0 {small: [290, 290, 290], big: [313, 313, 305]}
            - !box-1.0.0 {small: [290, 290, 306], big: [313, 313, 313]}
            - !box-1.0.0 {small: [314, 290, 290], big: [337, 313, 305]}
            - !box-1.0.0 {small: [314, 290, 306], big: [337, 313, 313]}
            - !box-1.0.0 {small: [262, 314, 290], big: [289, 337, 305]}
            - !box-1.0.0 {small: [262, 314, 306], big: [289, 337, 313]}
            - !box-1.0.0 {small: [290, 314, 290], big: [313, 337, 305]}
            - !box-1.0.0 {small: [290, 314, 306], big: [313, 337, 313]}
            - !box-1.0.0 {small: [314, 314, 290], big: [337, 337, 305]}
            - !box-1.0.0 {small: [314, 314, 306], big: [337, 337, 313]}
            - !box-1.0.0 {small: [262, 262, 314], big: [289, 289, 329]}
            - !box-1.0.0 {small: [262, 262, 330], big: [289, 289, 337]}
            - !box-1.0.0 {small: [290, 262, 314], big: [313, 289, 329]}
            - !box-1.0.0 {small: [290, 262, 330], big: [313, 289, 337]}
            - !box-1.0.0 {small: [314, 262, 314], big: [337, 289, 329]}
            - !box-1.0.0 {small: [314, 262, 330], big: [337, 289, 337]}
            - !box-1.0.0 {small: [262, 290, 314], big: [289, 313, 329]}
            - !box-1.0.0 {small: [262, 290, 330], big: [289, 313, 337]}
            - !box-1.0.0 {small: [290, 290, 314], big: [313, 313, 329]}
            - !box-1.0.0 {small: [290, 290, 330], big: [313, 313, 337]}
            - !box-1.0.0 {small: [314, 290, 314], big: [337, 313, 329]}
            - !box-1.0.0 {small: [314, 290, 330], big: [337, 313, 337]}
            - !box-1.0.0 {small: [262, 314, 314], big: [289, 337, 329]}
            - !box-1.0.0 {small: [262, 314, 330], big: [289, 337, 337]}
            - !box-1.0.0 {small: [290, 314, 314], big: [313, 337, 329]}
            - !box-1.0.0 {small: [290, 314, 330], big: [313, 337, 337]}
            - !box-1.0.0 {small: [314, 314, 314], big: [337, 337, 329]}
            - !box-1.0.0 {small: [314, 314, 330], big: [337, 337, 337]}
      leveldata:
        - !leveldata-1.1.0
          patch: 0
          level: 0
          is_subcycling_level: false
          iteration: !rational-1.0.0 [38, 1]
          delta_iteration: !rational-1.0.0 [1, 1]
          fab: !fabarraybase-1.0.0
            ixType: [0, 0, 0]
            nGrowVect: [3, 3, 3]
            boxArray: !boxarray-1.0.0
              - !box-1.0.0 {small: [0, 0, 0], big: [29, 29, 29]}
              - !box-1.0.0 {small: [30, 0, 0], big: [59, 29, 29]}
              - !box-1.0.0 {small: [60, 0, 0], big: [89, 29, 29]}
              - !box-1.0.0 {small: [90, 0, 0], big: [119, 29, 29]}
              - !box-1.0.0 {small: [120, 0, 0], big: [149, 29, 29]}
              - !box-1.0.0 {small: [0, 30, 0], big: [29, 59, 29]}
              - !box-1.0.0 {small: [30, 30, 0], big: [59, 59, 29]}
              - !box-1.0.0 {small: [60, 30, 0], big: [89, 59, 29]}
              - !box-1.0.0 {small: [90, 30, 0], big: [119, 59, 29]}
              - !box-1.0.0 {small: [120, 30, 0], big: [149, 59, 29]}
              - !box-1.0.0 {small: [0, 60, 0], big: [29, 89, 29]}
              - !box-1.0.0 {small: [30, 60, 0], big: [59, 89, 29]}
              - !box-1.0.0 {small: [60, 60, 0], big: [89, 89, 29]}
              - !box-1.0.0 {small: [90, 60, 0], big: [119, 89, 29]}
              - !box-1.0.0 {small: [120, 60, 0], big: [149, 89, 29]}
              - !box-1.0.0 {small: [0, 90, 0], big: [29, 119, 29]}
              - !box-1.0.0 {small: [30, 90, 0], big: [59, 119, 29]}
              - !box-1.0.0 {small: [60, 90, 0], big: [89, 119, 29]}
              - !box-1.0.0 {small: [90, 90, 0], big: [119, 119, 29]}
              - !box-1.0.0 {small: [120, 90, 0], big: [149, 119, 29]}
              - !box-1.0.0 {small: [0, 120, 0], big: [29, 149, 29]}
              - !box-1.0.0 {small: [30, 120, 0], big: [59, 149, 29]}
              - !box-1.0.0 {small: [60, 120, 0], big: [89, 149, 29]}
              - !box-1.0.0 {small: [90, 120, 0], big: [119, 149, 29]}
              - !box-1.0.0 {small: [120, 120, 0], big: [149, 149, 29]}
              - !box-1.0.0 {small: [0, 0, 30], big: [29, 29, 59]}
              - !box-1.0.0 {small: [30, 0, 30], big: [59, 29, 59]}
              - !box-1.0.0 {small: [60, 0, 30], big: [89, 29, 59]}
              - !box-1.0.0 {small: [90, 0, 30], big: [119, 29, 59]}
              - !box-1.0.0 {small: [120, 0, 30], big: [149, 29, 59]}
              - !box-1.0.0 {small: [0, 30, 30], big: [29, 59, 59]}
              - !box-1.0.0 {small: [30, 30, 30], big: [59, 59, 59]}
              - !box-1.0.0 {small: [60, 30, 30], big: [89, 59, 59]}
              - !box-1.0.0 {small: [90, 30, 30], big: [119, 59, 59]}
              - !box-1.0.0 {small: [120, 30, 30], big: [149, 59, 59]}
              - !box-1.0.0 {small: [0, 60, 30], big: [29, 89, 59]}
              - !box-1.0.0 {small: [30, 60, 30], big: [59, 89, 59]}
              - !box-1.0.0 {small: [60, 60, 30], big: [89, 89, 59]}
              - !box-1.0.0 {small: [90, 60, 30], big: [119, 89, 59]}
              - !box-1.0.0 {small: [120, 60, 30], big: [149, 89, 59]}
              - !box-1.0.0 {small: [0, 90, 30], big: [29, 119, 59]}
              - !box-1.0.0 {small: [30, 90, 30], big: [59, 119, 59]}
              - !box-1.0.0 {small: [60, 90, 30], big: [89, 119, 59]}
              - !box-1.0.0 {small: [90, 90, 30], big: [119, 119, 59]}
              - !box-1.0.0 {small: [120, 90, 30], big: [149, 119, 59]}
              - !box-1.0.0 {small: [0, 120, 30], big: [29, 149, 59]}
              - !box-1.0.0 {small: [30, 120, 30], big: [59, 149, 59]}
              - !box-1.0.0 {small: [60, 120, 30], big: [89, 149, 59]}
              - !box-1.0.0 {small: [90, 120, 30], big: [119, 149, 59]}
              - !box-1.0.0 {small: [120, 120, 30], big: [149, 149, 59]}
              - !box-1.0.0 {small: [0, 0, 60], big: [29, 29, 89]}
              - !box-1.0.0 {small: [30, 0, 60], big: [59, 29, 89]}
              - !box-1.0.0 {small: [60, 0, 60], big: [89, 29, 89]}
              - !box-1.0.0 {small: [90, 0, 60], big: [119, 29, 89]}
              - !box-1.0.0 {small: [120, 0, 60], big: [149, 29, 89]}
              - !box-1.0.0 {small: [0, 30, 60], big: [29, 59, 89]}
              - !box-1.0.0 {small: [30, 30, 60], big: [59, 59, 89]}
              - !box-1.0.0 {small: [60, 30, 60], big: [89, 59, 89]}
              - !box-1.0.0 {small: [90, 30, 60], big: [119, 59, 89]}
              - !box-1.0.0 {small: [120, 30, 60], big: [149, 59, 89]}
              - !box-1.0.0 {small: [0, 60, 60], big: [29, 89, 89]}
              - !box-1.0.0 {small: [30, 60, 60], big: [59, 89, 89]}
              - !box-1.0.0 {small: [60, 60, 60], big: [89, 89, 89]}
              - !box-1.0.0 {small: [90, 60, 60], big: [119, 89, 89]}
              - !box-1.0.0 {small: [120, 60, 60], big: [149, 89, 89]}
              - !box-1.0.0 {small: [0, 90, 60], big: [29, 119, 89]}
              - !box-1.0.0 {small: [30, 90, 60], big: [59, 119, 89]}
              - !box-1.0.0 {small: [60, 90, 60], big: [89, 119, 89]}
              - !box-1.0.0 {small: [90, 90, 60], big: [119, 119, 89]}
              - !box-1.0.0 {small: [120, 90, 60], big: [149, 119, 89]}
              - !box-1.0.0 {small: [0, 120, 60], big: [29, 149, 89]}
              - !box-1.0.0 {small: [30, 120, 60], big: [59, 149, 89]}
              - !box-1.0.0 {small: [60, 120, 60], big: [89, 149, 89]}
              - !box-1.0.0 {small: [90, 120, 60], big: [119, 149, 89]}
              - !box-1.0.0 {small: [120, 120, 60], big: [149, 149, 89]}
              - !box-1.0.0 {small: [0, 0, 90], big: [29, 29, 119]}
              - !box-1.0.0 {small: [30, 0, 90], big: [59, 29, 119]}
              - !box-1.0.0 {small: [60, 0, 90], big: [89, 29, 119]}
              - !box-1.0.0 {small: [90, 0, 90], big: [119, 29, 119]}
              - !box-1.0.0 {small: [120, 0, 90], big: [149, 29, 119]}
              - !box-1.0.0 {small: [0, 30, 90], big: [29, 59, 119]}
              - !box-1.0.0 {small: [30, 30, 90], big: [59, 59, 119]}
              - !box-1.0.0 {small: [60, 30, 90], big: [89, 59, 119]}
              - !box-1.0.0 {small: [90, 30, 90], big: [119, 59, 119]}
              - !box-1.0.0 {small: [120, 30, 90], big: [149, 59, 119]}
              - !box-1.0.0 {small: [0, 60, 90], big: [29, 89, 119]}
              - !box-1.0.0 {small: [30, 60, 90], big: [59, 89, 119]}
              - !box-1.0.0 {small: [60, 60, 90], big: [89, 89, 119]}
              - !box-1.0.0 {small: [90, 60, 90], big: [119, 89, 119]}
              - !box-1.0.0 {small: [120, 60, 90], big: [149, 89, 119]}
              - !box-1.0.0 {small: [0, 90, 90], big: [29, 119, 119]}
              - !box-1.0.0 {small: [30, 90, 90], big: [59, 119, 119]}
              - !box-1.0.0 {small: [60, 90, 90], big: [89, 119, 119]}
              - !box-1.0.0 {small: [90, 90, 90], big: [119, 119, 119]}
              - !box-1.0.0 {small: [120, 90, 90], big: [149, 119, 119]}
              - !box-1.0.0 {small: [0, 120, 90], big: [29, 149, 119]}
              - !box-1.0.0 {small: [30, 120, 90], big: [59, 149, 119]}
              - !box-1.0.0 {small: [60, 120, 90], big: [89, 149, 119]}
              - !box-1.0.0 {small: [90, 120, 90], big: [119, 149, 119]}
              - !box-1.0.0 {small: [120, 120, 90], big: [149, 149, 119]}
              - !box-1.0.0 {small: [0, 0, 120], big: [29, 29, 149]}
              - !box-1.0.0 {small: [30, 0, 120], big: [59, 29, 149]}
              - !box-1.0.0 {small: [60, 0, 120], big: [89, 29, 149]}
              - !box-1.0.0 {small: [90, 0, 120], big: [119, 29, 149]}
              - !box-1.0.0 {small: [120, 0, 120], big: [149, 29, 149]}
              - !box-1.0.0 {small: [0, 30, 120], big: [29, 59, 149]}
              - !box-1.0.0 {small: [30, 30, 120], big: [59, 59, 149]}
              - !box-1.0.0 {small: [60, 30, 120], big: [89, 59, 149]}
              - !box-1.0.0 {small: [90, 30, 120], big: [119, 59, 149]}
              - !box-1.0.0 {small: [120, 30, 120], big: [149, 59, 149]}
              - !box-1.0.0 {small: [0, 60, 120], big: [29, 89, 149]}
              - !box-1.0.0 {small: [30, 60, 120], big: [59, 89, 149]}
              - !box-1.0.0 {small: [60, 60, 120], big: [89, 89, 149]}
              - !box-1.0.0 {small: [90, 60, 120], big: [119, 89, 149]}
              - !box-1.0.0 {small: [120, 60, 120], big: [149, 89, 149]}
              - !box-1.0.0 {small: [0, 90, 120], big: [29, 119, 149]}
              - !box-1.0.0 {small: [30, 90, 120], big: [59, 119, 149]}
              - !box-1.0.0 {small: [60, 90, 120], big: [89, 119, 149]}
              - !box-1.0.0 {small: [90, 90, 120], big: [119, 119, 149]}
              - !box-1.0.0 {small: [120, 90, 120], big: [149, 119, 149]}
              - !box-1.0.0 {small: [0, 120, 120], big: [29, 149, 149]}
              - !box-1.0.0 {small: [30, 120, 120], big: [59, 149, 149]}
              - !box-1.0.0 {small: [60, 120, 120], big: [89, 149, 149]}
              - !box-1.0.0 {small: [90, 120, 120], big: [119, 149, 149]}
              - !box-1.0.0 {small: [120, 120, 120], big: [149, 149, 149]}
          groupdata:
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: CARPETXREGRID::REGRID_ERROR
                numvars: 1
                varnames: [regrid_error]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 149 CCTK_POSTSTEP: BoxInBox::EstimateError: Mark output variables as valid"
                        outer: "CallFunction iteration 0 CCTK_BASEGRID: CarpetXRegrid::CarpetXRegrid_InitError: Mark output variables as valid"
                        ghosts: "CallFunction iteration 0 CCTK_BASEGRID: CarpetXRegrid::CarpetXRegrid_InitError: Mark output variables as valid"
              patch: 0
              level: 0
              indextype: [1, 1, 1]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: SUBCYCLING::LEVEL_NEIGHBOR
                numvars: 1
                varnames: [level_neighbor]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetLevelNeighbor: Mark output variables as valid"
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
              patch: 0
              level: 0
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: SUBCYCLING::ISRMBNDRY
                numvars: 1
                varnames: [isrmbndry]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetIsRMBndry: Mark output variables as valid"
                        outer: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetIsRMBndry: Mark output variables as valid"
                        ghosts: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetIsRMBndry: Mark output variables as valid"
              patch: 0
              level: 0
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::STATE
                numvars: 2
                varnames: [u, rho]
                do_checkpoint: true
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: Set from RHS in ODESolvers
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: Set from RHS in ODESolvers
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
              patch: 0
              level: 0
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::OLD
                numvars: 2
                varnames: [u_old, rho_old]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 0
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::RHS
                numvars: 2
                varnames: [u_rhs, rho_rhs]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: false, outer: false, ghosts: false}
                      why:
                        int: ODESolvers updated the state vector
                        outer: ODESolvers updated the state vector
                        ghosts: ODESolvers updated the state vector
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: false, outer: false, ghosts: false}
                      why:
                        int: ODESolvers updated the state vector
                        outer: ODESolvers updated the state vector
                        ghosts: ODESolvers updated the state vector
              patch: 0
              level: 0
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K1
                numvars: 2
                varnames: [u_k1, rho_k1]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 0
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K2
                numvars: 2
                varnames: [u_k2, rho_k2]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 0
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K3
                numvars: 2
                varnames: [u_k3, rho_k3]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 0
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K4
                numvars: 2
                varnames: [u_k4, rho_k4]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 0
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::ERROR
                numvars: 2
                varnames: [u_err, rho_err]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 149 ODESolvers_PostStep: TestSubcyclingMC2::TestSubcyclingMC2_Error: Mark output variables as valid"
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 149 ODESolvers_PostStep: TestSubcyclingMC2::TestSubcyclingMC2_Error: Mark output variables as valid"
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
              patch: 0
              level: 0
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
        - !leveldata-1.1.0
          patch: 0
          level: 1
          is_subcycling_level: true
          iteration: !rational-1.0.0 [75, 2]
          delta_iteration: !rational-1.0.0 [1, 2]
          fab: !fabarraybase-1.0.0
            ixType: [0, 0, 0]
            nGrowVect: [3, 3, 3]
            boxArray: !boxarray-1.0.0
              - !box-1.0.0 {small: [112, 112, 112], big: [139, 139, 127]}
              - !box-1.0.0 {small: [112, 112, 128], big: [139, 139, 139]}
              - !box-1.0.0 {small: [140, 112, 112], big: [163, 139, 127]}
              - !box-1.0.0 {small: [140, 112, 128], big: [163, 139, 139]}
              - !box-1.0.0 {small: [164, 112, 112], big: [187, 139, 127]}
              - !box-1.0.0 {small: [164, 112, 128], big: [187, 139, 139]}
              - !box-1.0.0 {small: [112, 140, 112], big: [139, 163, 127]}
              - !box-1.0.0 {small: [112, 140, 128], big: [139, 163, 139]}
              - !box-1.0.0 {small: [140, 140, 112], big: [163, 163, 127]}
              - !box-1.0.0 {small: [140, 140, 128], big: [163, 163, 139]}
              - !box-1.0.0 {small: [164, 140, 112], big: [187, 163, 127]}
              - !box-1.0.0 {small: [164, 140, 128], big: [187, 163, 139]}
              - !box-1.0.0 {small: [112, 164, 112], big: [139, 187, 127]}
              - !box-1.0.0 {small: [112, 164, 128], big: [139, 187, 139]}
              - !box-1.0.0 {small: [140, 164, 112], big: [163, 187, 127]}
              - !box-1.0.0 {small: [140, 164, 128], big: [163, 187, 139]}
              - !box-1.0.0 {small: [164, 164, 112], big: [187, 187, 127]}
              - !box-1.0.0 {small: [164, 164, 128], big: [187, 187, 139]}
              - !box-1.0.0 {small: [112, 112, 140], big: [139, 139, 155]}
              - !box-1.0.0 {small: [112, 112, 156], big: [139, 139, 163]}
              - !box-1.0.0 {small: [140, 112, 140], big: [163, 139, 155]}
              - !box-1.0.0 {small: [140, 112, 156], big: [163, 139, 163]}
              - !box-1.0.0 {small: [164, 112, 140], big: [187, 139, 155]}
              - !box-1.0.0 {small: [164, 112, 156], big: [187, 139, 163]}
              - !box-1.0.0 {small: [112, 140, 140], big: [139, 163, 155]}
              - !box-1.0.0 {small: [112, 140, 156], big: [139, 163, 163]}
              - !box-1.0.0 {small: [140, 140, 140], big: [163, 163, 155]}
              - !box-1.0.0 {small: [140, 140, 156], big: [163, 163, 163]}
              - !box-1.0.0 {small: [164, 140, 140], big: [187, 163, 155]}
              - !box-1.0.0 {small: [164, 140, 156], big: [187, 163, 163]}
              - !box-1.0.0 {small: [112, 164, 140], big: [139, 187, 155]}
              - !box-1.0.0 {small: [112, 164, 156], big: [139, 187, 163]}
              - !box-1.0.0 {small: [140, 164, 140], big: [163, 187, 155]}
              - !box-1.0.0 {small: [140, 164, 156], big: [163, 187, 163]}
              - !box-1.0.0 {small: [164, 164, 140], big: [187, 187, 155]}
              - !box-1.0.0 {small: [164, 164, 156], big: [187, 187, 163]}
              - !box-1.0.0 {small: [112, 112, 164], big: [139, 139, 179]}
              - !box-1.0.0 {small: [112, 112, 180], big: [139, 139, 187]}
              - !box-1.0.0 {small: [140, 112, 164], big: [163, 139, 179]}
              - !box-1.0.0 {small: [140, 112, 180], big: [163, 139, 187]}
              - !box-1.0.0 {small: [164, 112, 164], big: [187, 139, 179]}
              - !box-1.0.0 {small: [164, 112, 180], big: [187, 139, 187]}
              - !box-1.0.0 {small: [112, 140, 164], big: [139, 163, 179]}
              - !box-1.0.0 {small: [112, 140, 180], big: [139, 163, 187]}
              - !box-1.0.0 {small: [140, 140, 164], big: [163, 163, 179]}
              - !box-1.0.0 {small: [140, 140, 180], big: [163, 163, 187]}
              - !box-1.0.0 {small: [164, 140, 164], big: [187, 163, 179]}
              - !box-1.0.0 {small: [164, 140, 180], big: [187, 163, 187]}
              - !box-1.0.0 {small: [112, 164, 164], big: [139, 187, 179]}
              - !box-1.0.0 {small: [112, 164, 180], big: [139, 187, 187]}
              - !box-1.0.0 {small: [140, 164, 164], big: [163, 187, 179]}
              - !box-1.0.0 {small: [140, 164, 180], big: [163, 187, 187]}
              - !box-1.0.0 {small: [164, 164, 164], big: [187, 187, 179]}
              - !box-1.0.0 {small: [164, 164, 180], big: [187, 187, 187]}
          groupdata:
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: CARPETXREGRID::REGRID_ERROR
                numvars: 1
                varnames: [regrid_error]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 150 CCTK_POSTSTEP: BoxInBox::EstimateError: Mark output variables as valid"
                        outer: "CallFunction iteration 0 CCTK_BASEGRID: CarpetXRegrid::CarpetXRegrid_InitError: Mark output variables as valid"
                        ghosts: "CallFunction iteration 0 CCTK_BASEGRID: CarpetXRegrid::CarpetXRegrid_InitError: Mark output variables as valid"
              patch: 0
              level: 1
              indextype: [1, 1, 1]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: SUBCYCLING::LEVEL_NEIGHBOR
                numvars: 1
                varnames: [level_neighbor]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetLevelNeighbor: Mark output variables as valid"
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
              patch: 0
              level: 1
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: SUBCYCLING::ISRMBNDRY
                numvars: 1
                varnames: [isrmbndry]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetIsRMBndry: Mark output variables as valid"
                        outer: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetIsRMBndry: Mark output variables as valid"
                        ghosts: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetIsRMBndry: Mark output variables as valid"
              patch: 0
              level: 1
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::STATE
                numvars: 2
                varnames: [u, rho]
                do_checkpoint: true
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: Set from RHS in ODESolvers
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: Set from RHS in ODESolvers
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
              patch: 0
              level: 1
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::OLD
                numvars: 2
                varnames: [u_old, rho_old]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 1
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::RHS
                numvars: 2
                varnames: [u_rhs, rho_rhs]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: false, outer: false, ghosts: false}
                      why:
                        int: ODESolvers updated the state vector
                        outer: ODESolvers updated the state vector
                        ghosts: ODESolvers updated the state vector
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: false, outer: false, ghosts: false}
                      why:
                        int: ODESolvers updated the state vector
                        outer: ODESolvers updated the state vector
                        ghosts: ODESolvers updated the state vector
              patch: 0
              level: 1
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K1
                numvars: 2
                varnames: [u_k1, rho_k1]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 1
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K2
                numvars: 2
                varnames: [u_k2, rho_k2]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 1
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K3
                numvars: 2
                varnames: [u_k3, rho_k3]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 1
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K4
                numvars: 2
                varnames: [u_k4, rho_k4]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 1
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::ERROR
                numvars: 2
                varnames: [u_err, rho_err]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 150 ODESolvers_PostStep: TestSubcyclingMC2::TestSubcyclingMC2_Error: Mark output variables as valid"
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 150 ODESolvers_PostStep: TestSubcyclingMC2::TestSubcyclingMC2_Error: Mark output variables as valid"
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
              patch: 0
              level: 1
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
        - !leveldata-1.1.0
          patch: 0
          level: 2
          is_subcycling_level: true
          iteration: !rational-1.0.0 [75, 2]
          delta_iteration: !rational-1.0.0 [1, 4]
          fab: !fabarraybase-1.0.0
            ixType: [0, 0, 0]
            nGrowVect: [3, 3, 3]
            boxArray: !boxarray-1.0.0
              - !box-1.0.0 {small: [262, 262, 262], big: [289, 289, 277]}
              - !box-1.0.0 {small: [262, 262, 278], big: [289, 289, 289]}
              - !box-1.0.0 {small: [290, 262, 262], big: [313, 289, 277]}
              - !box-1.0.0 {small: [290, 262, 278], big: [313, 289, 289]}
              - !box-1.0.0 {small: [314, 262, 262], big: [337, 289, 277]}
              - !box-1.0.0 {small: [314, 262, 278], big: [337, 289, 289]}
              - !box-1.0.0 {small: [262, 290, 262], big: [289, 313, 277]}
              - !box-1.0.0 {small: [262, 290, 278], big: [289, 313, 289]}
              - !box-1.0.0 {small: [290, 290, 262], big: [313, 313, 277]}
              - !box-1.0.0 {small: [290, 290, 278], big: [313, 313, 289]}
              - !box-1.0.0 {small: [314, 290, 262], big: [337, 313, 277]}
              - !box-1.0.0 {small: [314, 290, 278], big: [337, 313, 289]}
              - !box-1.0.0 {small: [262, 314, 262], big: [289, 337, 277]}
              - !box-1.0.0 {small: [262, 314, 278], big: [289, 337, 289]}
              - !box-1.0.0 {small: [290, 314, 262], big: [313, 337, 277]}
              - !box-1.0.0 {small: [290, 314, 278], big: [313, 337, 289]}
              - !box-1.0.0 {small: [314, 314, 262], big: [337, 337, 277]}
              - !box-1.0.0 {small: [314, 314, 278], big: [337, 337, 289]}
              - !box-1.0.0 {small: [262, 262, 290], big: [289, 289, 305]}
              - !box-1.0.0 {small: [262, 262, 306], big: [289, 289, 313]}
              - !box-1.0.0 {small: [290, 262, 290], big: [313, 289, 305]}
              - !box-1.0.0 {small: [290, 262, 306], big: [313, 289, 313]}
              - !box-1.0.0 {small: [314, 262, 290], big: [337, 289, 305]}
              - !box-1.0.0 {small: [314, 262, 306], big: [337, 289, 313]}
              - !box-1.0.0 {small: [262, 290, 290], big: [289, 313, 305]}
              - !box-1.0.0 {small: [262, 290, 306], big: [289, 313, 313]}
              - !box-1.0.0 {small: [290, 290, 290], big: [313, 313, 305]}
              - !box-1.0.0 {small: [290, 290, 306], big: [313, 313, 313]}
              - !box-1.0.0 {small: [314, 290, 290], big: [337, 313, 305]}
              - !box-1.0.0 {small: [314, 290, 306], big: [337, 313, 313]}
              - !box-1.0.0 {small: [262, 314, 290], big: [289, 337, 305]}
              - !box-1.0.0 {small: [262, 314, 306], big: [289, 337, 313]}
              - !box-1.0.0 {small: [290, 314, 290], big: [313, 337, 305]}
              - !box-1.0.0 {small: [290, 314, 306], big: [313, 337, 313]}
              - !box-1.0.0 {small: [314, 314, 290], big: [337, 337, 305]}
              - !box-1.0.0 {small: [314, 314, 306], big: [337, 337, 313]}
              - !box-1.0.0 {small: [262, 262, 314], big: [289, 289, 329]}
              - !box-1.0.0 {small: [262, 262, 330], big: [289, 289, 337]}
              - !box-1.0.0 {small: [290, 262, 314], big: [313, 289, 329]}
              - !box-1.0.0 {small: [290, 262, 330], big: [313, 289, 337]}
              - !box-1.0.0 {small: [314, 262, 314], big: [337, 289, 329]}
              - !box-1.0.0 {small: [314, 262, 330], big: [337, 289, 337]}
              - !box-1.0.0 {small: [262, 290, 314], big: [289, 313, 329]}
              - !box-1.0.0 {small: [262, 290, 330], big: [289, 313, 337]}
              - !box-1.0.0 {small: [290, 290, 314], big: [313, 313, 329]}
              - !box-1.0.0 {small: [290, 290, 330], big: [313, 313, 337]}
              - !box-1.0.0 {small: [314, 290, 314], big: [337, 313, 329]}
              - !box-1.0.0 {small: [314, 290, 330], big: [337, 313, 337]}
              - !box-1.0.0 {small: [262, 314, 314], big: [289, 337, 329]}
              - !box-1.0.0 {small: [262, 314, 330], big: [289, 337, 337]}
              - !box-1.0.0 {small: [290, 314, 314], big: [313, 337, 329]}
              - !box-1.0.0 {small: [290, 314, 330], big: [313, 337, 337]}
              - !box-1.0.0 {small: [314, 314, 314], big: [337, 337, 329]}
              - !box-1.0.0 {small: [314, 314, 330], big: [337, 337, 337]}
          groupdata:
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: CARPETXREGRID::REGRID_ERROR
                numvars: 1
                varnames: [regrid_error]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 150 CCTK_POSTSTEP: BoxInBox::EstimateError: Mark output variables as valid"
                        outer: "CallFunction iteration 0 CCTK_BASEGRID: CarpetXRegrid::CarpetXRegrid_InitError: Mark output variables as valid"
                        ghosts: "CallFunction iteration 0 CCTK_BASEGRID: CarpetXRegrid::CarpetXRegrid_InitError: Mark output variables as valid"
              patch: 0
              level: 2
              indextype: [1, 1, 1]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: SUBCYCLING::LEVEL_NEIGHBOR
                numvars: 1
                varnames: [level_neighbor]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetLevelNeighbor: Mark output variables as valid"
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
              patch: 0
              level: 2
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: SUBCYCLING::ISRMBNDRY
                numvars: 1
                varnames: [isrmbndry]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetIsRMBndry: Mark output variables as valid"
                        outer: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetIsRMBndry: Mark output variables as valid"
                        ghosts: "CallFunction iteration 0 Subcycling_RMBndryGroup: Subcycling::Subcycling_SetIsRMBndry: Mark output variables as valid"
              patch: 0
              level: 2
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::STATE
                numvars: 2
                varnames: [u, rho]
                do_checkpoint: true
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: Set from RHS in ODESolvers
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: Set from RHS in ODESolvers
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
              patch: 0
              level: 2
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::OLD
                numvars: 2
                varnames: [u_old, rho_old]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 2
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::RHS
                numvars: 2
                varnames: [u_rhs, rho_rhs]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: false, outer: false, ghosts: false}
                      why:
                        int: ODESolvers updated the state vector
                        outer: ODESolvers updated the state vector
                        ghosts: ODESolvers updated the state vector
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: false, outer: false, ghosts: false}
                      why:
                        int: ODESolvers updated the state vector
                        outer: ODESolvers updated the state vector
                        ghosts: ODESolvers updated the state vector
              patch: 0
              level: 2
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K1
                numvars: 2
                varnames: [u_k1, rho_k1]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 2
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K2
                numvars: 2
                varnames: [u_k2, rho_k2]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 2
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K3
                numvars: 2
                varnames: [u_k3, rho_k3]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 2
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::K4
                numvars: 2
                varnames: [u_k4, rho_k4]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: false, ghosts: false}
                      why:
                        int: "ODESolvers after lincomb: Mark interior as valid"
                        outer: "ODESolvers after lincomb: Mark outer boundary as invalid"
                        ghosts: "ODESolvers after lincomb: Mark ghosts as valid"
              patch: 0
              level: 2
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
            - !groupdata-1.1.0
              commongroupdata: !commongroupdata-1.0.0
                groupname: TESTSUBCYCLINGMC2::ERROR
                numvars: 2
                varnames: [u_err, rho_err]
                do_checkpoint: false
                do_restrict: true
                valid:
                  -
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 150 ODESolvers_PostStep: TestSubcyclingMC2::TestSubcyclingMC2_Error: Mark output variables as valid"
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
                    - !why_valid-1.0.0
                      valid: !valid-1.0.0 {int: true, outer: true, ghosts: true}
                      why:
                        int: "CallFunction iteration 150 ODESolvers_PostStep: TestSubcyclingMC2::TestSubcyclingMC2_Error: Mark output variables as valid"
                        outer: "SyncGroupsByDirI after syncing: Mark outer boundaries as valid"
                        ghosts: "SyncGroupsByDirI after syncing: Mark ghost zones as valid"
              patch: 0
              level: 2
              indextype: [0, 0, 0]
              nghostzones: [3, 3, 3]
              parities: [[1, 1, 1], [1, 1, 1]]
              fluxes: ["", "", ""]
...
